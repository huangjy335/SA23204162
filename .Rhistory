df<-data.frame(X1=c(1,2,3),
X2=c("one","two","three"),
X3=c("TRUE","FALSE","TRUE"))
data.frame(lapply(df,function(x) if (is.numeric(x)) scale01(x) else x))
df<-data.frame(X1=c(1,2,3),
X2=c("one","two","three"),
X3=c("TRUE","FALSE","TRUE"))
vapply(df,sd)
?vapply
df<-data.frame(X1=c(1,2,3),
X2=c("one","two","three"),
X3=c("TRUE","FALSE","TRUE"))
vapply(df,sd,FUN.VALUE = c(0))
df<-data.frame(X1=c(1,2,3),
X2=X1,
X3=X2)
vapply(df,sd,FUN.VALUE=c(0))
df<-data.frame(X1=c(1,2,3),
X2=c(1,2,3),
X3=c(1,2,3))
vapply(df,sd,FUN.VALUE=c(0))
#对混合数据框中求类型全为数值型各列标准差
df<-data.frame(X1=c(1,2,3),
X2=c("one","two","three"),
X3=c("TRUE","FALSE","TRUE"))
vapply(df[vapply(df,is.numeric,FUN.VALUE=c(TRUE)],sd, c(0))
vapply(df,is.numeric,FUN.VALUE=c(TRUE)
）
#对混合数据框中求类型全为数值型各列标准差
df<-data.frame(X1=c(1,2,3),
X2=c("one","two","three"),
X3=c("TRUE","FALSE","TRUE"))
vapply(df[vapply(df,is.numeric,FUN.VALUE=c(TRUE))],sd, c(0))
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(c(xb,yb))
}
GibsR<-RG(1e3,2e3,2,3,10)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(c(xb,yb))
}
GibsR<-RG(1e4,2e3,2,3,10)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
GibsR<-RG(1e4,2e3,2,3,10)
install.packages("microbenchmark")
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
Rcpp::sourceCpp("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
Rcpp::sourceCpp("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
Rcpp::sourceCpp("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
sourceCpp("E:/firstyear/statisticcompute/9/meanC.cpp")
library(microbenchmark)
x <- runif(1e4); mean2 <- function(x)sum(x)/length(x)
ts <- microbenchmark(meanR=mean(x),meanR2=mean2(x),
meancpp=meanC(x))
summary(ts)[,c(1,3,5,6)]
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/meanC.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,burn,a,b,n){
x<-y<-numeric(N)
x[1]<-rbinom(1,prob=0.5,size=n)
y[1]<-rbeta(1,x[1]+a,n-x[1]+b)
for (i in 2:N) {
x[i]<-rbinom(1,prob = y[i - 1], size = n)
y[i]<-rbeta(1,x[i] + a, n - x[i] + b)
}
xb<-x[(burn+1):N]
yb<-y[(burn+1):N]
return(list(xb,yb))
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,thin,a,b,n){
mat <- matrix(nrow = N, ncol = 2)
x <-rbinom(1,prob=0.5,size=n)
y <-rbeta(1,x+a,n-x+b)
for (i in 1:N) {
for (j in 1:thin) {
x <- rbinom(1,prob = y, size = n)
y <- rbeta(1,x+ a, n - x+ b)
}
mat[i, ] <- c(x, y)
}
mat
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,thin,a,b,n){
mat <- matrix(nrow = N, ncol = 2)
x <-rbinom(1,prob=0.5,size=n)
y <-rbeta(1,x+a,n-x+b)
for (i in 1:N) {
for (j in 1:thin) {
x <- rbinom(1,prob = y, size = n)
y <- rbeta(1,x+ a, n - x+ b)
}
mat[i, ] <- c(x, y)
}
mat
}
#Rcpp的Gibbs采样
source("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
library(Rcpp)
library(microbenchmark)
#R的Gibbs采样
RG<-function(N,thin,a,b,n){
mat <- matrix(nrow = N, ncol = 2)
x <-rbinom(1,prob=0.5,size=n)
y <-rbeta(1,x+a,n-x+b)
for (i in 1:N) {
for (j in 1:thin) {
x <- rbinom(1,prob = y, size = n)
y <- rbeta(1,x+ a, n - x+ b)
}
mat[i, ] <- c(x, y)
}
mat
}
#Rcpp的Gibbs采样
sourceCpp("E:/firstyear/statisticcompute/9/Gibscpp.cpp")
ts <- microbenchmark(GibbsR=RG(1e3,10,2,3,10),
GibbsRcpp=gibbsC(1e3,10,2,3,10))
summary(ts)[,c(1,3,5,6)]
install.packages('roxygen2',dependencies = TRUE)
install.packages('devtools',dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("lars")
data(diabetes)
library(lars)
data(diabetes)
attach(diabetes)
View(diabetes)
View(diabetes)
View(diabetes)
str(diabetes$x)
typeof(diabetes$x)
d1<-as.matrix(diabetes$x)
d2<-as.vector(diabetes$y)
View(diabetes)
rm(list=ls())
gc()
dt<-data = read.table("E:/firstyear/bayes/bigproject/diabetes.txt",header = T,sep="\t")
View(dt)
dt<-read.table("E:/firstyear/bayes/bigproject/diabetes.txt",header = T,sep="\t")
View(dt)
devtools::install_github("zhanghustc/statcomp",
build_vignettes = TRUE, force=T)
devtools::install_github("zhanghustc/statcomp",build_vignettes = TRUE, force=T)
install.packages("rlang")
install.packages("rlang")
devtools::install_github("zhanghustc/statcomp",build_vignettes = TRUE, force=T)
library(SA23204162)
devtools::document()
library(devtools)
devtools::document()
library(Rcpp)
library(roxygen2)
library(devtools)
devtools::document()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
remove.packages("SA23204162")
devtools::document()
devtools::document()
devtools::document()
setwd("~/path/to/SA23204162")
gc()
library(devtools)
library(Rcpp)
library(roxygen2)
devtools::document()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
getwd()
setwd("E:/firstyear/statisticcompute/SA23204162")
devtools::document()
setwd("E:/firstyear/statisticcompute")
devtools::document()
setwd("E:/firstyear/statisticcompute/SA23204162")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
